#!/bin/bash
#
# The MIT License (MIT)
#
# Copyright (c) 2013 Mathias Leppich <mleppich@muhqu.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

SELF="$(basename $0)"

usage() {
    (cat | sed 's/SELF/'"$SELF"'/') <<'USAGE'
Usage: SELF [ -h | -s | -c CMD [-n N] | [VALUE] [..] ] [ -L ]
USAGE
}

help() {
    usage;
    (cat | sed 's/SELF/'"$SELF"'/') <<'HELP'

Options:
    -h, --help            this help
    -s, --stream          read values from stdin and draw the chart incrementaly
    -c, --command CMD     exec CMD to read values
    -n, --sleep N         interval to sleep between exec
    -L, --legend          show legend, e.g. min/max/curr/mean
    -l, --no-legend       hide legend
    --colors              use a spectrum of colors
    --no-colors           don't use any colors

Examples:

    $ SELF 1 5 22 13 44 33 38


      ̄ ̄̄̄ ̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄
 
    $ SELF -c "seq 0 40 | awk '{printf \"%6d\\n\", (sin((systime()+\$1)/2)*cos((systime()+\$1)/4)+1)*20;}'"
 
  
      ̄̄̄ ̄̄̄ ̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄ ̄̄̄ ̄̄̄̄ ̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄ ̄̄̄̄ ̄̄̄ ̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄

    $ ping -n localhost | awk 'BEGIN{FS="time=|ms"}{printf "%d\n",$2*1000;fflush()}' | ./bin/superspark --stream -L



      ̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄ ̄̄̄̄̄̄̄̄̄̄̄̄̄
     min: 0      max: 196    curr: 105    mean: 97.12   

Author:
    (c) 2013 Mathias Leppich <mleppich@muhqu.de>

HELP
}

SLEEP="1"
LINECNT="4"
LEGEND="no"
COLORS="no"
ACTION="series"
SERIES=""

main() {
    if [ -t 0 -a -z "$1" ]; then
        usage;
        exit 1;
    fi
    until [ -z "$1" ]; do
        case "$1" in
            -h|--help)
                help;
                exit 0;
                ;;
            -s|--stream)
                ACTION="stream";
                if [ -t 0 ]; then
                    echo "Error: option $1 requires stream from stdin"
                    exit 1;
                fi
                shift;
                ;;
            -c|--command)
                ACTION="command";
                if [ -z "$2" ]; then
                    echo "Error: option $1 requires CMD"
                    exit 1;
                fi
                CMD="$2"
                shift; shift;
                ;;
            -n|--nap|--sleep)
                if [ -z "$2" ]; then
                    echo "Error: option $1 requires N; number of seconds to sleep"
                    exit 1;
                fi
                SLEEP="$2";
                shift;shift;
                ;;
            -L|--legend)
                LEGEND="yes"
                shift;
                ;;
            -l|--no-legend)
                LEGEND="no"
                shift;
                ;;
            --color|--colors)
                COLORS="yes"
                shift;
                ;;
            --no-color|--no-colors)
                COLORS="no"
                shift;
                ;;
            *)
                SERIES="$SERIES $1";
                shift;
                ;;
        esac
    done

    if [ "$LEGEND" = "yes" ]; then 
        LINECNT=$(( $LINECNT + 1 ));
    fi

    case $ACTION in
        series )
            spark $SERIES
            ;;
        stream )
            cat | while read N; do
                R=$( (echo "$R";echo "$N") | tail -50 );
                SPARK="$(echo "$R" | spark)";
                echo -e "$REWIND$SPARK";
                REWIND="\033[${LINECNT}A"
            done
            ;;
        command )
            while true; do
                SPARK="$(echo "$CMD" | $SHELL | spark)";
                echo -e "$REWIND$SPARK";
                REWIND="\033[${LINECNT}A"
                sleep $SLEEP;
            done
            ;;
    esac
}

spark() {
    if [ -t 0 ]; then
      input=("$@")
    else
      input=($(</dev/stdin))
    fi

    min=${input[0]}
    max=${input[0]}
    sum=0

    colorCode() {
      if [ "$COLORS" != "yes" ]; then
        echo -n "0"
      else
        colors=( 198 199 199 164 164 129 129 93 63 63 33 33 39 38 44 43 49 48 48 83 )
        index=$(bc -l <<< "scale=0;((${#colors[*]} - 1) * $1) / 1")
        echo -n "38;5;${colors[index]}"
      fi
    }

    for LINE in ${input[*]}; do
      sum=$((sum + LINE))
      if [ "$LINE" -lt "$min" ]; then
        min=$LINE
      fi

      if [ "$LINE" -gt "$max" ]; then
        max=$LINE
      fi
    done

    OUTPUT="\033[K\n\033[K\n\033[K\n\033[K "

    declare -a normed
    for LINE in ${input[*]}; do
      if [ "$max" -lt "1" ]; then
        tmax=1
      else
        tmax=$max
      fi
      normed=$(bc -l <<< "$LINE/$tmax")
      count=$(bc -l <<< "scale=0;$normed * 18 / 1")
      OUTPUT="$OUTPUT$(printf "\033[%sm " "$(colorCode "$normed")")"
      for _ in $(seq 0 "$count"); do
        OUTPUT="$OUTPUT\xcc\x84"
      done
      OUTPUT="$OUTPUT\033[0m"
    done

    if [ "$LEGEND" = "yes" ]; then
      mean=$(bc -l <<< "$sum/${#input[*]}")
      cur=${input[$((${#input[*]} - 1))]}

      OUTPUT="$OUTPUT\n "
      OUTPUT="$OUTPUT$(printf "\033[%smmin\033[0m: %-6d " "$(colorCode 0)" "$min")"
      OUTPUT="$OUTPUT$(printf "\033[%smmax\033[0m: %-6d " "$(colorCode 1)" "$max")"
      OUTPUT="$OUTPUT$(printf "\033[%smcurr\033[0m: %-6d " "$(colorCode "$(bc -l <<< "$cur/$tmax")")" "$cur")"
      OUTPUT="$OUTPUT$(printf "\033[%smmean\033[0m: %-8.2f" "$(colorCode "$(bc -l <<< "$mean/$tmax")")" "$mean")"
    fi

    echo -e "$OUTPUT"
}

main "$@"
